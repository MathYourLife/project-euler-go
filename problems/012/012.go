/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have
over five hundred divisors?
*/

package main

import (
	"fmt"
)

func is_a_factor(composite uint64, factor uint64) (bool, uint64) {
	if composite < 2 {
		return false, composite
	}
	if composite%factor == 0 {
		return true, composite / factor
	}
	return false, composite
}

func prime_factors(n uint64) map[uint64]int {
	var t bool
	factor := uint64(2)
	pf := map[uint64]int{}

	for {
		t, n = is_a_factor(n, factor)
		if t {
			pf[factor]++
			if n <= 1 {
				break
			}
		} else {
			factor++
		}
		if n <= 1 {
			break
		}
	}
	return pf
}

func main() {

	tn := uint64(0)
	n := uint64(1)

SearchLoop:
	for {
		tn += n
		pf := prime_factors(tn)
		comb := 1
		for _, count := range pf {
			comb *= count + 1
		}
		if comb > 500 {
			fmt.Printf("%d\t%v\t%d\n", tn, pf, comb)
			break SearchLoop
		}
		n++
	}
}
