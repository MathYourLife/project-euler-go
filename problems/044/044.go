/*
Pentagon numbers

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The
first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their
difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk − Pj| is minimised; what is
the value of D?
*/

package main

import (
	"fmt"
)

func is_pentagonal(check int, p_to_bool map[int]bool, n_to_p map[int]int, max_p int, max_n int) (bool, int, int) {

	for {
		if check <= max_p {
			break
		}
		max_n++
		max_p = max_n * (3*max_n - 1) / 2
		p_to_bool[max_p] = true
		n_to_p[max_n] = max_p
	}

	return p_to_bool[check], max_p, max_n
}

func nth_pentagon(n int, p_to_bool map[int]bool, n_to_p map[int]int, max_p int, max_n int) (int, int, int) {

	for {
		if n <= max_n {
			break
		}
		max_n++
		max_p = max_n * (3*max_n - 1) / 2
		p_to_bool[max_p] = true
		n_to_p[max_n] = max_p
	}
	return n_to_p[n], max_p, max_n
}

func NewPentagonalNumbers() (*PentagonalNumbers, error) {
	return &PentagonalNumbers{
		n:       make(chan int, 0),
		is_pent: map[int]bool{},
	}, nil
}

type PentagonalNumbers struct {
	n       chan int
	is_pent map[int]bool
}

func (pn PentagonalNumbers) Generate() {
	val := 1
	i := 1
	for {
		pn.is_pent[val] = true
		pn.n <- val
		val += 3*i + 1
		i++
	}
}

func main() {

	// Pentagonal numbers a and b have sum c and difference d.
	// a + b = c
	// b - a = d

	// generate know pentagonal number c

	// iterate through list of a values (known pentagonal numbers less than c)
	// b = c - a
	// is b pentagonal?
	// d = b - a
	// is d pentagonal?

	pn, _ := NewPentagonalNumbers()

	go pn.Generate()

SEARCHLOOP:
	for c := range pn.n {
		// fmt.Println("c:", c)
		for a, _ := range pn.is_pent {
			// fmt.Println("c", c, "a", a)
			b := c - a
			if !pn.is_pent[b] {
				continue
			}
			// fmt.Println("c", c, "a", a, "b", b)
			d := b - a
			if !pn.is_pent[d] {
				continue
			}
			fmt.Printf("a=%d, b=%d, c=%d, d=%d\n", a, b, c, d)
			fmt.Printf("a + b = c\n")
			fmt.Printf("%d + %d = %d\n", a, b, c)
			fmt.Printf("b - a = d\n")
			fmt.Printf("%d - %d = %d\n", b, a, d)
			break SEARCHLOOP
		}
	}
}
